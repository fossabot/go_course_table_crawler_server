// An web crawler and API server implementation for the course table app below:
// https://github.com/gaogao-qwq/flutter_course_table_demo
// Copyright (C) 2023 Zhihao Zhou
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package main

import (
	"crypto/sha1"
	"encoding/hex"
	"fmt"
	"github.com/gocolly/colly"
	"log"
	"net/http"
)

func main() {
	//fmt.Println(SHA1("888112d2-7aba-4702-9a0b-3993bc12dab2-" + "060911"))
	cookie := login()
	cookieString := ""
	for _, i := range cookie {
		cookieString += i.Name + ":" + i.Value + ";"
	}

	c := colly.NewCollector()

	c.OnRequest(func(r *colly.Request) {
		r.Headers.Set("cookie", cookieString)
	})

	c.OnHTML("html", func(e *colly.HTMLElement) {
		e.Request.Headers.Set("Cookie", cookieString)
		fmt.Println(e.Text)
	})

	err := c.Visit("http://jw.gzgs.edu.cn/eams/courseTableForStd!courseTable.action")
	if err != nil {
		return
	}
}

func login() []*http.Cookie {
	c := colly.NewCollector()

	cookies := c.Cookies("http://jw.gzgs.edu.cn")
	cookieString := ""
	for _, i := range cookies {
		cookieString += i.Name + ":" + i.Value + ";"
	}

	c.OnResponse(func(r *colly.Response) {
		log.Println("response received", r.StatusCode)
		if r.StatusCode != 200 {
			log.Fatalf("status code error: %d", r.StatusCode)
			return
		}
	})

	scripts := make([]string, 0)
	c.OnHTML("script", func(h *colly.HTMLElement) {
		h.Request.Headers.Set("Cookie", cookieString)
		scripts = append(scripts, h.Text)
	})

	//err := c.Visit("http://jw.gzgs.edu.cn/eams/login.action")
	//if err != nil {
	//	log.Fatal(err)
	//}

	err := c.Post(
		"http://jw.gzgs.edu.cn/eams/login.action",
		map[string]string{
			"username": "202110610352",
			"password": SHA1(scripts[5][274:311] + "060911"),
		},
	)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(scripts[5][274:311])
	fmt.Println(SHA1(scripts[5][274:311] + "060911"))

	return cookies
}

func SHA1(s string) string {
	o := sha1.New()
	o.Write([]byte(s))
	return hex.EncodeToString(o.Sum(nil))
}
